from ...GenericModel import GenericModel 
from ...Generics import Event, EventTypes
from enum import Enum
import queue


class GenericMacEventTypes(Enum):
    HANDLEMACFRAME = "handlemacframe"


class GenericMac(GenericModel):

    def __init__(self, componentname, componentinstancenumber, context=None, configurationparameters=None, num_worker_threads=1, topology=None, sdr=None):
        super().__init__(componentname, componentinstancenumber, context, configurationparameters, num_worker_threads, topology)
        self.framequeue = queue.Queue(maxsize=100)
        self.sdrdev = sdr
        print("I am Generic MAC my uhd instance id is ", self.sdrdev.componentinstancenumber)
        self.eventhandlers[GenericMacEventTypes.HANDLEMACFRAME] = self.on_handlemacframe

    
    def on_init(self, eventobj: Event):
        self.send_self(Event(self, GenericMacEventTypes.HANDLEMACFRAME, None))  # Continuously trigger handle_frame
        # print("Initialized", self.componentname, ":", self.componentinstancenumber)

    def on_handlemacframe(self, eventobj: Event): 
        # print("will handle frame from on_handlemacframe")     
        self.handle_frame()
        # self.send_self(Event(self, GenericMacEventTypes.HANDLEMACFRAME, None)) #Continuously trigger handle_frame
        # HANDLEMACFRAME event will be generated by the inheriting component to facilitate delay
    
    def on_message_from_bottom(self, eventobj: Event):
        # print(f"I am {self.componentname}, eventcontent={eventobj.eventcontent}\n")
        evt = Event(self, EventTypes.MFRB, eventobj.eventcontent)
        self.send_up(evt)
    
    def on_message_from_top(self, eventobj: Event):
        # print(f"I am {self.componentname}, eventcontent={eventobj.eventcontent}\n")
        # put message in queue and try accessing the channel
        self.framequeue.put_nowait(eventobj)
        #print(self.componentinstancenumber, " MAC queue size ", self.framequeue.qsize())
        self.handle_frame()
        #print("Mac put the frame in queueu", eventobj.eventcontent.payload)

    def handle_frame(self):
        pass